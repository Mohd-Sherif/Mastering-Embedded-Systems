
Lab 02 - part 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002f4  080002fc  000102fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002f4  080002f4  000102fc  2**0
                  CONTENTS
  4 .ARM          00000000  080002f4  080002f4  000102fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002f4  080002fc  000102fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002f4  080002f4  000102f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002f8  080002f8  000102f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002fc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002fc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000102fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000ee  00000000  00000000  00010325  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000089  00000000  00000000  00010413  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  000104a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  000104e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f26  00000000  00000000  00010518  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000433  00000000  00000000  0001143e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003c06  00000000  00000000  00011871  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00015477  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  000154f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002dc 	.word	0x080002dc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002dc 	.word	0x080002dc

08000170 <main>:
#define GPIOA_BASE	0x40010800
#define GPIOA_CRH	(*(volatile uint32_t *)(GPIOA_BASE + 0x04))
#define GPIOA_ODR	(*(volatile uint32_t *)(GPIOA_BASE + 0x0C))

int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
enabled).
00: HSI selected as system clock
01: HSE selected as system clock
10: PLL selected as system clock
11: Not allowed*/
	RCC_CFGR |= 0b10;
 8000176:	4b2d      	ldr	r3, [pc, #180]	; (800022c <main+0xbc>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a2c      	ldr	r2, [pc, #176]	; (800022c <main+0xbc>)
 800017c:	f043 0302 	orr.w	r3, r3, #2
 8000180:	6013      	str	r3, [r2, #0]
1011: SYSCLK divided by 16
1100: SYSCLK divided by 64
1101: SYSCLK divided by 128
1110: SYSCLK divided by 256
1111: SYSCLK divided by 512*/
	RCC_CFGR |= 0;
 8000182:	4b2a      	ldr	r3, [pc, #168]	; (800022c <main+0xbc>)
 8000184:	4a29      	ldr	r2, [pc, #164]	; (800022c <main+0xbc>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	6013      	str	r3, [r2, #0]
0xx: HCLK not divided
100: HCLK divided by 2
101: HCLK divided by 4
110: HCLK divided by 8
111: HCLK divided by 16*/
	RCC_CFGR |= 0b100<<8;
 800018a:	4b28      	ldr	r3, [pc, #160]	; (800022c <main+0xbc>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	4a27      	ldr	r2, [pc, #156]	; (800022c <main+0xbc>)
 8000190:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000194:	6013      	str	r3, [r2, #0]
0xx: HCLK not divided
100: HCLK divided by 2
101: HCLK divided by 4
110: HCLK divided by 8
111: HCLK divided by 16*/
	RCC_CFGR |= 0b101<<11;
 8000196:	4b25      	ldr	r3, [pc, #148]	; (800022c <main+0xbc>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	4a24      	ldr	r2, [pc, #144]	; (800022c <main+0xbc>)
 800019c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80001a0:	6013      	str	r3, [r2, #0]
0111: PLL input clock x 9
10xx: Reserved
1100: Reserved
1101: PLL input clock x 6.5
111x: Reserved*/
	RCC_CFGR |= 0b0110<<18;
 80001a2:	4b22      	ldr	r3, [pc, #136]	; (800022c <main+0xbc>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	4a21      	ldr	r2, [pc, #132]	; (800022c <main+0xbc>)
 80001a8:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 80001ac:	6013      	str	r3, [r2, #0]
/*Bit 16 PLLSRC: PLL entry clock source
Set and cleared by software to select PLL clock source. This bit can be written only when PLL is
disabled.
0: HSI oscillator clock / 2 selected as PLL input clock
1: Clock from PREDIV1 selected as PLL input clock*/
	RCC_CFGR |= 0<<16;
 80001ae:	4b1f      	ldr	r3, [pc, #124]	; (800022c <main+0xbc>)
 80001b0:	4a1e      	ldr	r2, [pc, #120]	; (800022c <main+0xbc>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	6013      	str	r3, [r2, #0]
Cleared by hardware when entering Stop or Standby mode. This bit can not be reset if the
PLL clock is used as system clock or is selected to become the system clock. Software
must disable the USB OTG FS clock before clearing this bit.
0: PLL OFF
1: PLL ON*/
	RCC_CR |= 1<<24;
 80001b6:	4b1e      	ldr	r3, [pc, #120]	; (8000230 <main+0xc0>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	4a1d      	ldr	r2, [pc, #116]	; (8000230 <main+0xc0>)
 80001bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001c0:	6013      	str	r3, [r2, #0]

    RCC_APB2ENR |= (1 << 2);
 80001c2:	4b1c      	ldr	r3, [pc, #112]	; (8000234 <main+0xc4>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a1b      	ldr	r2, [pc, #108]	; (8000234 <main+0xc4>)
 80001c8:	f043 0304 	orr.w	r3, r3, #4
 80001cc:	6013      	str	r3, [r2, #0]
    GPIOA_CRH &= 0xFF0FFFFF;
 80001ce:	4b1a      	ldr	r3, [pc, #104]	; (8000238 <main+0xc8>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a19      	ldr	r2, [pc, #100]	; (8000238 <main+0xc8>)
 80001d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001d8:	6013      	str	r3, [r2, #0]
    GPIOA_CRH |= 0x00200000;
 80001da:	4b17      	ldr	r3, [pc, #92]	; (8000238 <main+0xc8>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a16      	ldr	r2, [pc, #88]	; (8000238 <main+0xc8>)
 80001e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001e4:	6013      	str	r3, [r2, #0]

	while(1){
		GPIOA_ODR |= (1UL << 13);
 80001e6:	4b15      	ldr	r3, [pc, #84]	; (800023c <main+0xcc>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a14      	ldr	r2, [pc, #80]	; (800023c <main+0xcc>)
 80001ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001f0:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 50000; i++);
 80001f2:	2300      	movs	r3, #0
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	e002      	b.n	80001fe <main+0x8e>
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	3301      	adds	r3, #1
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000204:	4293      	cmp	r3, r2
 8000206:	ddf7      	ble.n	80001f8 <main+0x88>
		GPIOA_ODR &= ~(1UL << 13);
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <main+0xcc>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a0b      	ldr	r2, [pc, #44]	; (800023c <main+0xcc>)
 800020e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000212:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 50000; i++);
 8000214:	2300      	movs	r3, #0
 8000216:	603b      	str	r3, [r7, #0]
 8000218:	e002      	b.n	8000220 <main+0xb0>
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	3301      	adds	r3, #1
 800021e:	603b      	str	r3, [r7, #0]
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000226:	4293      	cmp	r3, r2
 8000228:	ddf7      	ble.n	800021a <main+0xaa>
		GPIOA_ODR |= (1UL << 13);
 800022a:	e7dc      	b.n	80001e6 <main+0x76>
 800022c:	40021004 	.word	0x40021004
 8000230:	40021000 	.word	0x40021000
 8000234:	40021018 	.word	0x40021018
 8000238:	40010804 	.word	0x40010804
 800023c:	4001080c 	.word	0x4001080c

08000240 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000240:	480d      	ldr	r0, [pc, #52]	; (8000278 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000242:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000244:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000248:	480c      	ldr	r0, [pc, #48]	; (800027c <LoopForever+0x6>)
  ldr r1, =_edata
 800024a:	490d      	ldr	r1, [pc, #52]	; (8000280 <LoopForever+0xa>)
  ldr r2, =_sidata
 800024c:	4a0d      	ldr	r2, [pc, #52]	; (8000284 <LoopForever+0xe>)
  movs r3, #0
 800024e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000250:	e002      	b.n	8000258 <LoopCopyDataInit>

08000252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000256:	3304      	adds	r3, #4

08000258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800025c:	d3f9      	bcc.n	8000252 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800025e:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000260:	4c0a      	ldr	r4, [pc, #40]	; (800028c <LoopForever+0x16>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000264:	e001      	b.n	800026a <LoopFillZerobss>

08000266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000268:	3204      	adds	r2, #4

0800026a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800026c:	d3fb      	bcc.n	8000266 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800026e:	f000 f811 	bl	8000294 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000272:	f7ff ff7d 	bl	8000170 <main>

08000276 <LoopForever>:

LoopForever:
    b LoopForever
 8000276:	e7fe      	b.n	8000276 <LoopForever>
  ldr   r0, =_estack
 8000278:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800027c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000280:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000284:	080002fc 	.word	0x080002fc
  ldr r2, =_sbss
 8000288:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800028c:	2000001c 	.word	0x2000001c

08000290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC1_2_IRQHandler>
	...

08000294 <__libc_init_array>:
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	2500      	movs	r5, #0
 8000298:	4e0c      	ldr	r6, [pc, #48]	; (80002cc <__libc_init_array+0x38>)
 800029a:	4c0d      	ldr	r4, [pc, #52]	; (80002d0 <__libc_init_array+0x3c>)
 800029c:	1ba4      	subs	r4, r4, r6
 800029e:	10a4      	asrs	r4, r4, #2
 80002a0:	42a5      	cmp	r5, r4
 80002a2:	d109      	bne.n	80002b8 <__libc_init_array+0x24>
 80002a4:	f000 f81a 	bl	80002dc <_init>
 80002a8:	2500      	movs	r5, #0
 80002aa:	4e0a      	ldr	r6, [pc, #40]	; (80002d4 <__libc_init_array+0x40>)
 80002ac:	4c0a      	ldr	r4, [pc, #40]	; (80002d8 <__libc_init_array+0x44>)
 80002ae:	1ba4      	subs	r4, r4, r6
 80002b0:	10a4      	asrs	r4, r4, #2
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	d105      	bne.n	80002c2 <__libc_init_array+0x2e>
 80002b6:	bd70      	pop	{r4, r5, r6, pc}
 80002b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002bc:	4798      	blx	r3
 80002be:	3501      	adds	r5, #1
 80002c0:	e7ee      	b.n	80002a0 <__libc_init_array+0xc>
 80002c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002c6:	4798      	blx	r3
 80002c8:	3501      	adds	r5, #1
 80002ca:	e7f2      	b.n	80002b2 <__libc_init_array+0x1e>
 80002cc:	080002f4 	.word	0x080002f4
 80002d0:	080002f4 	.word	0x080002f4
 80002d4:	080002f4 	.word	0x080002f4
 80002d8:	080002f8 	.word	0x080002f8

080002dc <_init>:
 80002dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002de:	bf00      	nop
 80002e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e2:	bc08      	pop	{r3}
 80002e4:	469e      	mov	lr, r3
 80002e6:	4770      	bx	lr

080002e8 <_fini>:
 80002e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ea:	bf00      	nop
 80002ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ee:	bc08      	pop	{r3}
 80002f0:	469e      	mov	lr, r3
 80002f2:	4770      	bx	lr
