
Lab 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002d0  080002d8  000102d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002d0  080002d0  000102d8  2**0
                  CONTENTS
  4 .ARM          00000000  080002d0  080002d0  000102d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002d0  080002d8  000102d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002d0  080002d0  000102d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002d4  080002d4  000102d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002d8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002d8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000102d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000090  00000000  00000000  00010301  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000083  00000000  00000000  00010391  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000050  00000000  00000000  00010418  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  00010468  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000acb  00000000  00000000  000104a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000000e5  00000000  00000000  00010f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00002f73  00000000  00000000  00011050  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00013fc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000074  00000000  00000000  00014040  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002b8 	.word	0x080002b8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002b8 	.word	0x080002b8

08000170 <main>:
#define AFIO_EXTICR1	(*(vuint32_t *)(AFIO_BASE + 0x08))

#define NVIC_ISER0   (*(vuint32_t *)(0xE000E100))

int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_APB2ENR |= (1 << 2);
 8000174:	4b17      	ldr	r3, [pc, #92]	; (80001d4 <main+0x64>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a16      	ldr	r2, [pc, #88]	; (80001d4 <main+0x64>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]
	GPIOA_CRH &= 0xFF0FFFFF;
 8000180:	4b15      	ldr	r3, [pc, #84]	; (80001d8 <main+0x68>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a14      	ldr	r2, [pc, #80]	; (80001d8 <main+0x68>)
 8000186:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800018a:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= 0x00200000;
 800018c:	4b12      	ldr	r3, [pc, #72]	; (80001d8 <main+0x68>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a11      	ldr	r2, [pc, #68]	; (80001d8 <main+0x68>)
 8000192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000196:	6013      	str	r3, [r2, #0]
In output mode (MODE[1:0] > 00):
00: General purpose output push-pull
01: General purpose output Open-drain
10: Alternate function output Push-pull
11: Alternate function output Open-drain*/
	GPIOx_CRL |= 1 << 2; /*set A0 at input mode*/
 8000198:	4b10      	ldr	r3, [pc, #64]	; (80001dc <main+0x6c>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a0f      	ldr	r2, [pc, #60]	; (80001dc <main+0x6c>)
 800019e:	f043 0304 	orr.w	r3, r3, #4
 80001a2:	6013      	str	r3, [r2, #0]
0010: PC[x] pin
0011: PD[x] pin
0100: PE[x] pin
0101: PF[x] pin
0110: PG[x] pin*/
	AFIO_EXTICR1 |= 0b0000 << 0; /* select A0 input for EXTI0 external interrupt */
 80001a4:	4b0e      	ldr	r3, [pc, #56]	; (80001e0 <main+0x70>)
 80001a6:	4a0e      	ldr	r2, [pc, #56]	; (80001e0 <main+0x70>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	6013      	str	r3, [r2, #0]

	/*Bits 19:0 TRx: Rising trigger event configuration bit of line x
0: Rising trigger disabled (for Event and Interrupt) for input line
1: Rising trigger enabled (for Event and Interrupt) for input line.*/
	EXTI_RTSR |= 1 << 0; /* set rising edge */
 80001ac:	4b0d      	ldr	r3, [pc, #52]	; (80001e4 <main+0x74>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a0c      	ldr	r2, [pc, #48]	; (80001e4 <main+0x74>)
 80001b2:	f043 0301 	orr.w	r3, r3, #1
 80001b6:	6013      	str	r3, [r2, #0]

	/*Bits 19:0 MRx: Interrupt Mask on line x
0: Interrupt request from Line x is masked
1: Interrupt request from Line x is not masked*/
	EXTI_IMR |= 1 << 0; /* set line 0 unmasked */
 80001b8:	4b0b      	ldr	r3, [pc, #44]	; (80001e8 <main+0x78>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a0a      	ldr	r2, [pc, #40]	; (80001e8 <main+0x78>)
 80001be:	f043 0301 	orr.w	r3, r3, #1
 80001c2:	6013      	str	r3, [r2, #0]

	NVIC_ISER0 |=(1<<6);
 80001c4:	4b09      	ldr	r3, [pc, #36]	; (80001ec <main+0x7c>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a08      	ldr	r2, [pc, #32]	; (80001ec <main+0x7c>)
 80001ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001ce:	6013      	str	r3, [r2, #0]

	while(1);
 80001d0:	e7fe      	b.n	80001d0 <main+0x60>
 80001d2:	bf00      	nop
 80001d4:	40021018 	.word	0x40021018
 80001d8:	40010804 	.word	0x40010804
 80001dc:	40010800 	.word	0x40010800
 80001e0:	40010008 	.word	0x40010008
 80001e4:	40010408 	.word	0x40010408
 80001e8:	40010400 	.word	0x40010400
 80001ec:	e000e100 	.word	0xe000e100

080001f0 <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(){
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
	GPIOA_ODR ^= (1UL << 13); /* toggle led */
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <EXTI0_IRQHandler+0x24>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a06      	ldr	r2, [pc, #24]	; (8000214 <EXTI0_IRQHandler+0x24>)
 80001fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80001fe:	6013      	str	r3, [r2, #0]
/*Bits 19:0 PRx: Pending bit
0: No trigger request occurred
1: selected trigger request occurred
This bit is set when the selected edge event arrives on the external interrupt line. This bit is
cleared by writing a ‘1’ into the bit. */
	EXTI_PR |= 1 << 0; /* clear interrupt to avoid infinite loop */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <EXTI0_IRQHandler+0x28>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a04      	ldr	r2, [pc, #16]	; (8000218 <EXTI0_IRQHandler+0x28>)
 8000206:	f043 0301 	orr.w	r3, r3, #1
 800020a:	6013      	str	r3, [r2, #0]
}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	4001080c 	.word	0x4001080c
 8000218:	40010414 	.word	0x40010414

0800021c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800021c:	480d      	ldr	r0, [pc, #52]	; (8000254 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800021e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000220:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000224:	480c      	ldr	r0, [pc, #48]	; (8000258 <LoopForever+0x6>)
  ldr r1, =_edata
 8000226:	490d      	ldr	r1, [pc, #52]	; (800025c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000228:	4a0d      	ldr	r2, [pc, #52]	; (8000260 <LoopForever+0xe>)
  movs r3, #0
 800022a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800022c:	e002      	b.n	8000234 <LoopCopyDataInit>

0800022e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800022e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000232:	3304      	adds	r3, #4

08000234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000238:	d3f9      	bcc.n	800022e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023a:	4a0a      	ldr	r2, [pc, #40]	; (8000264 <LoopForever+0x12>)
  ldr r4, =_ebss
 800023c:	4c0a      	ldr	r4, [pc, #40]	; (8000268 <LoopForever+0x16>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000240:	e001      	b.n	8000246 <LoopFillZerobss>

08000242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000244:	3204      	adds	r2, #4

08000246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000248:	d3fb      	bcc.n	8000242 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800024a:	f000 f811 	bl	8000270 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800024e:	f7ff ff8f 	bl	8000170 <main>

08000252 <LoopForever>:

LoopForever:
    b LoopForever
 8000252:	e7fe      	b.n	8000252 <LoopForever>
  ldr   r0, =_estack
 8000254:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800025c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000260:	080002d8 	.word	0x080002d8
  ldr r2, =_sbss
 8000264:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000268:	2000001c 	.word	0x2000001c

0800026c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800026c:	e7fe      	b.n	800026c <ADC1_2_IRQHandler>
	...

08000270 <__libc_init_array>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	2500      	movs	r5, #0
 8000274:	4e0c      	ldr	r6, [pc, #48]	; (80002a8 <__libc_init_array+0x38>)
 8000276:	4c0d      	ldr	r4, [pc, #52]	; (80002ac <__libc_init_array+0x3c>)
 8000278:	1ba4      	subs	r4, r4, r6
 800027a:	10a4      	asrs	r4, r4, #2
 800027c:	42a5      	cmp	r5, r4
 800027e:	d109      	bne.n	8000294 <__libc_init_array+0x24>
 8000280:	f000 f81a 	bl	80002b8 <_init>
 8000284:	2500      	movs	r5, #0
 8000286:	4e0a      	ldr	r6, [pc, #40]	; (80002b0 <__libc_init_array+0x40>)
 8000288:	4c0a      	ldr	r4, [pc, #40]	; (80002b4 <__libc_init_array+0x44>)
 800028a:	1ba4      	subs	r4, r4, r6
 800028c:	10a4      	asrs	r4, r4, #2
 800028e:	42a5      	cmp	r5, r4
 8000290:	d105      	bne.n	800029e <__libc_init_array+0x2e>
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000298:	4798      	blx	r3
 800029a:	3501      	adds	r5, #1
 800029c:	e7ee      	b.n	800027c <__libc_init_array+0xc>
 800029e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002a2:	4798      	blx	r3
 80002a4:	3501      	adds	r5, #1
 80002a6:	e7f2      	b.n	800028e <__libc_init_array+0x1e>
 80002a8:	080002d0 	.word	0x080002d0
 80002ac:	080002d0 	.word	0x080002d0
 80002b0:	080002d0 	.word	0x080002d0
 80002b4:	080002d4 	.word	0x080002d4

080002b8 <_init>:
 80002b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ba:	bf00      	nop
 80002bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002be:	bc08      	pop	{r3}
 80002c0:	469e      	mov	lr, r3
 80002c2:	4770      	bx	lr

080002c4 <_fini>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	bf00      	nop
 80002c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ca:	bc08      	pop	{r3}
 80002cc:	469e      	mov	lr, r3
 80002ce:	4770      	bx	lr
