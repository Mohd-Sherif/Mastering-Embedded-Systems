
Lab 01 - GPIO Part 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000214  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000344  0800034c  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000344  08000344  0001034c  2**0
                  CONTENTS
  4 .ARM          00000000  08000344  08000344  0001034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000344  0800034c  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000344  08000344  00010344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000348  08000348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800034c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800034c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000b4  00000000  00000000  00010375  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000009d  00000000  00000000  00010429  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000088  00000000  00000000  000104c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000050  00000000  00000000  00010550  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000038  00000000  00000000  000105a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000aad  00000000  00000000  000105d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000104  00000000  00000000  00011085  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00002ec2  00000000  00000000  00011189  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001404b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000080  00000000  00000000  000140c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800032c 	.word	0x0800032c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800032c 	.word	0x0800032c

08000170 <myWait>:
#define GPIOB_BASE	0x40010C00
#define GPIOB_CRH	(*(vuint32_t *)(GPIOB_BASE + 0x04))
#define GPIOB_ODR	(*(vuint32_t *)(GPIOB_BASE + 0x0C))
#define GPIOB_CRL	(*(vuint32_t *)(GPIOB_BASE + 0x00))

void myWait(){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	for (int i = 0; i < 50000; i++);
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]
 800017a:	e002      	b.n	8000182 <myWait+0x12>
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	3301      	adds	r3, #1
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000188:	4293      	cmp	r3, r2
 800018a:	ddf7      	ble.n	800017c <myWait+0xc>
}
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
	...

08000198 <main>:

int main(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	RCC_APB2ENR |= (1 << 2); /* Enable IOPA */
 800019c:	4b35      	ldr	r3, [pc, #212]	; (8000274 <main+0xdc>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a34      	ldr	r2, [pc, #208]	; (8000274 <main+0xdc>)
 80001a2:	f043 0304 	orr.w	r3, r3, #4
 80001a6:	6013      	str	r3, [r2, #0]
	RCC_APB2ENR |= (1 << 3); /* Enable IOPB */
 80001a8:	4b32      	ldr	r3, [pc, #200]	; (8000274 <main+0xdc>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a31      	ldr	r2, [pc, #196]	; (8000274 <main+0xdc>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6013      	str	r3, [r2, #0]
	GPIOA_CRH = 0;
 80001b4:	4b30      	ldr	r3, [pc, #192]	; (8000278 <main+0xe0>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
	GPIOA_CRL = 0;
 80001ba:	4b30      	ldr	r3, [pc, #192]	; (800027c <main+0xe4>)
 80001bc:	2200      	movs	r2, #0
 80001be:	601a      	str	r2, [r3, #0]
	GPIOB_CRH = 0;
 80001c0:	4b2f      	ldr	r3, [pc, #188]	; (8000280 <main+0xe8>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
	GPIOB_CRL = 0;
 80001c6:	4b2f      	ldr	r3, [pc, #188]	; (8000284 <main+0xec>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
In output mode (MODE[1:0] > 00):
00: General purpose output push-pull
01: General purpose output Open-drain
10: Alternate function output Push-pull
11: Alternate function output Open-drain*/
	GPIOA_CRH &=~(0b11<<20);
 80001cc:	4b2a      	ldr	r3, [pc, #168]	; (8000278 <main+0xe0>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a29      	ldr	r2, [pc, #164]	; (8000278 <main+0xe0>)
 80001d2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80001d6:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= 1 << 22; /* set A13 floating input */
 80001d8:	4b27      	ldr	r3, [pc, #156]	; (8000278 <main+0xe0>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a26      	ldr	r2, [pc, #152]	; (8000278 <main+0xe0>)
 80001de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001e2:	6013      	str	r3, [r2, #0]
Refer to Table 20: Port bit configuration table.
00: Input mode (reset state)
01: Output mode, max speed 10 MHz.
10: Output mode, max speed 2 MHz.
11: Output mode, max speed 50 MHz.*/
	GPIOB_CRH |= 1 << 20; /* set B13 output */
 80001e4:	4b26      	ldr	r3, [pc, #152]	; (8000280 <main+0xe8>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a25      	ldr	r2, [pc, #148]	; (8000280 <main+0xe8>)
 80001ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOB_CRH &=~(0b11<<22);
 80001f0:	4b23      	ldr	r3, [pc, #140]	; (8000280 <main+0xe8>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a22      	ldr	r2, [pc, #136]	; (8000280 <main+0xe8>)
 80001f6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80001fa:	6013      	str	r3, [r2, #0]
In output mode (MODE[1:0] > 00):
00: General purpose output push-pull
01: General purpose output Open-drain
10: Alternate function output Push-pull
11: Alternate function output Open-drain*/
	GPIOA_CRL &=~(0b11<<4);
 80001fc:	4b1f      	ldr	r3, [pc, #124]	; (800027c <main+0xe4>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a1e      	ldr	r2, [pc, #120]	; (800027c <main+0xe4>)
 8000202:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000206:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |= 1 << 6; /*set A1 floating input*/
 8000208:	4b1c      	ldr	r3, [pc, #112]	; (800027c <main+0xe4>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a1b      	ldr	r2, [pc, #108]	; (800027c <main+0xe4>)
 800020e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000212:	6013      	str	r3, [r2, #0]
Refer to Table 20: Port bit configuration table.
00: Input mode (reset state)
01: Output mode, max speed 10 MHz.
10: Output mode, max speed 2 MHz.
11: Output mode, max speed 50 MHz.*/
	GPIOB_CRL |= 1 << 4; /* set B1 output */
 8000214:	4b1b      	ldr	r3, [pc, #108]	; (8000284 <main+0xec>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a1a      	ldr	r2, [pc, #104]	; (8000284 <main+0xec>)
 800021a:	f043 0310 	orr.w	r3, r3, #16
 800021e:	6013      	str	r3, [r2, #0]
	GPIOB_CRL &=~(0b11<<6);
 8000220:	4b18      	ldr	r3, [pc, #96]	; (8000284 <main+0xec>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a17      	ldr	r2, [pc, #92]	; (8000284 <main+0xec>)
 8000226:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800022a:	6013      	str	r3, [r2, #0]

	while(1){
		if (((GPIOA_IDR & (1 << 1)) >> 1) == 0){
 800022c:	4b16      	ldr	r3, [pc, #88]	; (8000288 <main+0xf0>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f003 0302 	and.w	r3, r3, #2
 8000234:	2b00      	cmp	r3, #0
 8000236:	d10c      	bne.n	8000252 <main+0xba>
			GPIOB_ODR ^= 1 << 1;
 8000238:	4b14      	ldr	r3, [pc, #80]	; (800028c <main+0xf4>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a13      	ldr	r2, [pc, #76]	; (800028c <main+0xf4>)
 800023e:	f083 0302 	eor.w	r3, r3, #2
 8000242:	6013      	str	r3, [r2, #0]
			while (((GPIOA_IDR & (1 << 1)) >> 1) == 0); /* Single Press */
 8000244:	bf00      	nop
 8000246:	4b10      	ldr	r3, [pc, #64]	; (8000288 <main+0xf0>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f003 0302 	and.w	r3, r3, #2
 800024e:	2b00      	cmp	r3, #0
 8000250:	d0f9      	beq.n	8000246 <main+0xae>
		}
		if (((GPIOA_IDR & (1 << 13)) >> 13) == 1){
 8000252:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <main+0xf0>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	0b5b      	lsrs	r3, r3, #13
 8000258:	f003 0301 	and.w	r3, r3, #1
 800025c:	2b01      	cmp	r3, #1
 800025e:	d105      	bne.n	800026c <main+0xd4>
			GPIOB_ODR ^= 1 << 13; /* Multiple Press */
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <main+0xf4>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a09      	ldr	r2, [pc, #36]	; (800028c <main+0xf4>)
 8000266:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800026a:	6013      	str	r3, [r2, #0]
		}
		myWait();
 800026c:	f7ff ff80 	bl	8000170 <myWait>
		if (((GPIOA_IDR & (1 << 1)) >> 1) == 0){
 8000270:	e7dc      	b.n	800022c <main+0x94>
 8000272:	bf00      	nop
 8000274:	40021018 	.word	0x40021018
 8000278:	40010804 	.word	0x40010804
 800027c:	40010800 	.word	0x40010800
 8000280:	40010c04 	.word	0x40010c04
 8000284:	40010c00 	.word	0x40010c00
 8000288:	40010808 	.word	0x40010808
 800028c:	40010c0c 	.word	0x40010c0c

08000290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000292:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000294:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000298:	480c      	ldr	r0, [pc, #48]	; (80002cc <LoopForever+0x6>)
  ldr r1, =_edata
 800029a:	490d      	ldr	r1, [pc, #52]	; (80002d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800029c:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <LoopForever+0xe>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a0:	e002      	b.n	80002a8 <LoopCopyDataInit>

080002a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a6:	3304      	adds	r3, #4

080002a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ac:	d3f9      	bcc.n	80002a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ae:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b0:	4c0a      	ldr	r4, [pc, #40]	; (80002dc <LoopForever+0x16>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b4:	e001      	b.n	80002ba <LoopFillZerobss>

080002b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b8:	3204      	adds	r2, #4

080002ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002bc:	d3fb      	bcc.n	80002b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002be:	f000 f811 	bl	80002e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c2:	f7ff ff69 	bl	8000198 <main>

080002c6 <LoopForever>:

LoopForever:
    b LoopForever
 80002c6:	e7fe      	b.n	80002c6 <LoopForever>
  ldr   r0, =_estack
 80002c8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d4:	0800034c 	.word	0x0800034c
  ldr r2, =_sbss
 80002d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002dc:	2000001c 	.word	0x2000001c

080002e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e0:	e7fe      	b.n	80002e0 <ADC1_2_IRQHandler>
	...

080002e4 <__libc_init_array>:
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	2500      	movs	r5, #0
 80002e8:	4e0c      	ldr	r6, [pc, #48]	; (800031c <__libc_init_array+0x38>)
 80002ea:	4c0d      	ldr	r4, [pc, #52]	; (8000320 <__libc_init_array+0x3c>)
 80002ec:	1ba4      	subs	r4, r4, r6
 80002ee:	10a4      	asrs	r4, r4, #2
 80002f0:	42a5      	cmp	r5, r4
 80002f2:	d109      	bne.n	8000308 <__libc_init_array+0x24>
 80002f4:	f000 f81a 	bl	800032c <_init>
 80002f8:	2500      	movs	r5, #0
 80002fa:	4e0a      	ldr	r6, [pc, #40]	; (8000324 <__libc_init_array+0x40>)
 80002fc:	4c0a      	ldr	r4, [pc, #40]	; (8000328 <__libc_init_array+0x44>)
 80002fe:	1ba4      	subs	r4, r4, r6
 8000300:	10a4      	asrs	r4, r4, #2
 8000302:	42a5      	cmp	r5, r4
 8000304:	d105      	bne.n	8000312 <__libc_init_array+0x2e>
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800030c:	4798      	blx	r3
 800030e:	3501      	adds	r5, #1
 8000310:	e7ee      	b.n	80002f0 <__libc_init_array+0xc>
 8000312:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000316:	4798      	blx	r3
 8000318:	3501      	adds	r5, #1
 800031a:	e7f2      	b.n	8000302 <__libc_init_array+0x1e>
 800031c:	08000344 	.word	0x08000344
 8000320:	08000344 	.word	0x08000344
 8000324:	08000344 	.word	0x08000344
 8000328:	08000348 	.word	0x08000348

0800032c <_init>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	bf00      	nop
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr

08000338 <_fini>:
 8000338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033a:	bf00      	nop
 800033c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033e:	bc08      	pop	{r3}
 8000340:	469e      	mov	lr, r3
 8000342:	4770      	bx	lr
