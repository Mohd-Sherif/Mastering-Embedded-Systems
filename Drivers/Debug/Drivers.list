
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006e8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000818  08000820  00010820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000818  08000818  00010820  2**0
                  CONTENTS
  4 .ARM          00000000  08000818  08000818  00010820  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000818  08000820  00010820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000818  08000818  00010818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800081c  0800081c  0001081c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  08000820  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000820  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010820  2**0
                  CONTENTS, READONLY
 12 .debug_info   000035a7  00000000  00000000  00010849  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000081e  00000000  00000000  00013df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a28  00000000  00000000  0001460e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000198  00000000  00000000  00015038  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000150  00000000  00000000  000151d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002366  00000000  00000000  00015320  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001a96  00000000  00000000  00017686  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009e80  00000000  00000000  0001911c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00022f9c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000534  00000000  00000000  00023018  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000800 	.word	0x08000800

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000800 	.word	0x08000800

08000170 <EXTI0_IRQHandler>:
/*******************************************************/

/*******************************************************/
/****************** ISR Functions **********************/
/*******************************************************/
void EXTI0_IRQHandler(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/* Clear IRQ bit in Pending Register (EXTI_PR) */
	EXTI->PR |= (1 << 0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]

	/* Call the IRQ callback Function */
	GP_IRQ_CallBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000024 	.word	0x20000024

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	/* Clear IRQ bit in Pending Register (EXTI_PR) */
	EXTI->PR |= (1 << 1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]

	/* Call the IRQ callback Function */
	GP_IRQ_CallBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3

}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000024 	.word	0x20000024

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	/* Clear IRQ bit in Pending Register (EXTI_PR) */
	EXTI->PR |= (1 << 2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]

	/* Call the IRQ callback Function */
	GP_IRQ_CallBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000024 	.word	0x20000024

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	/* Clear IRQ bit in Pending Register (EXTI_PR) */
	EXTI->PR |= (1 << 3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]

	/* Call the IRQ callback Function */
	GP_IRQ_CallBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000024 	.word	0x20000024

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	/* Clear IRQ bit in Pending Register (EXTI_PR) */
	EXTI->PR |= (1 << 4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]

	/* Call the IRQ callback Function */
	GP_IRQ_CallBack[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000024 	.word	0x20000024

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1 << 5)) { EXTI->PR |= (1 << 5); GP_IRQ_CallBack[5](); }
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->PR & (1 << 6)) { EXTI->PR |= (1 << 6); GP_IRQ_CallBack[6](); }
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->PR & (1 << 7)) { EXTI->PR |= (1 << 7); GP_IRQ_CallBack[7](); }
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->PR & (1 << 8)) { EXTI->PR |= (1 << 8); GP_IRQ_CallBack[8](); }
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->PR & (1 << 9)) { EXTI->PR |= (1 << 9); GP_IRQ_CallBack[9](); }
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000024 	.word	0x20000024

080002cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1 << 10)) { EXTI->PR |= (1 << 10); GP_IRQ_CallBack[10](); }
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->PR & (1 << 11)) { EXTI->PR |= (1 << 11); GP_IRQ_CallBack[11](); }
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->PR & (1 << 12)) { EXTI->PR |= (1 << 12); GP_IRQ_CallBack[12](); }
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if(EXTI->PR & (1 << 13)) { EXTI->PR |= (1 << 13); GP_IRQ_CallBack[13](); }
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if(EXTI->PR & (1 << 14)) { EXTI->PR |= (1 << 14); GP_IRQ_CallBack[14](); }
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if(EXTI->PR & (1 << 15)) { EXTI->PR |= (1 << 15); GP_IRQ_CallBack[15](); }
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000024 	.word	0x20000024

08000390 <Get_CRLH_Position>:
 * @param [in] 		-PinNumber
 * @retval 			-PinPos
 * Note				-None
 */
static uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	uint8_t PinPos = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	73fb      	strb	r3, [r7, #15]
	switch (PinNumber){
 800039e:	88fb      	ldrh	r3, [r7, #6]
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	d049      	beq.n	8000438 <Get_CRLH_Position+0xa8>
 80003a4:	2b80      	cmp	r3, #128	; 0x80
 80003a6:	dc11      	bgt.n	80003cc <Get_CRLH_Position+0x3c>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	d039      	beq.n	8000420 <Get_CRLH_Position+0x90>
 80003ac:	2b08      	cmp	r3, #8
 80003ae:	dc06      	bgt.n	80003be <Get_CRLH_Position+0x2e>
 80003b0:	2b02      	cmp	r3, #2
 80003b2:	d02f      	beq.n	8000414 <Get_CRLH_Position+0x84>
 80003b4:	2b04      	cmp	r3, #4
 80003b6:	d030      	beq.n	800041a <Get_CRLH_Position+0x8a>
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d028      	beq.n	800040e <Get_CRLH_Position+0x7e>
		case GPIO_PIN_15:
			PinPos = 28;
			break;
		default :
			/* Do nothing */
			break;
 80003bc:	e03f      	b.n	800043e <Get_CRLH_Position+0xae>
	switch (PinNumber){
 80003be:	2b20      	cmp	r3, #32
 80003c0:	d034      	beq.n	800042c <Get_CRLH_Position+0x9c>
 80003c2:	2b40      	cmp	r3, #64	; 0x40
 80003c4:	d035      	beq.n	8000432 <Get_CRLH_Position+0xa2>
 80003c6:	2b10      	cmp	r3, #16
 80003c8:	d02d      	beq.n	8000426 <Get_CRLH_Position+0x96>
			break;
 80003ca:	e038      	b.n	800043e <Get_CRLH_Position+0xae>
	switch (PinNumber){
 80003cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d0:	d026      	beq.n	8000420 <Get_CRLH_Position+0x90>
 80003d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d6:	dc09      	bgt.n	80003ec <Get_CRLH_Position+0x5c>
 80003d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003dc:	d01a      	beq.n	8000414 <Get_CRLH_Position+0x84>
 80003de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003e2:	d01a      	beq.n	800041a <Get_CRLH_Position+0x8a>
 80003e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003e8:	d011      	beq.n	800040e <Get_CRLH_Position+0x7e>
			break;
 80003ea:	e028      	b.n	800043e <Get_CRLH_Position+0xae>
	switch (PinNumber){
 80003ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f0:	d01c      	beq.n	800042c <Get_CRLH_Position+0x9c>
 80003f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f6:	dc03      	bgt.n	8000400 <Get_CRLH_Position+0x70>
 80003f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003fc:	d013      	beq.n	8000426 <Get_CRLH_Position+0x96>
			break;
 80003fe:	e01e      	b.n	800043e <Get_CRLH_Position+0xae>
	switch (PinNumber){
 8000400:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000404:	d015      	beq.n	8000432 <Get_CRLH_Position+0xa2>
 8000406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800040a:	d015      	beq.n	8000438 <Get_CRLH_Position+0xa8>
			break;
 800040c:	e017      	b.n	800043e <Get_CRLH_Position+0xae>
			PinPos = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	73fb      	strb	r3, [r7, #15]
			break;
 8000412:	e014      	b.n	800043e <Get_CRLH_Position+0xae>
			PinPos = 4;
 8000414:	2304      	movs	r3, #4
 8000416:	73fb      	strb	r3, [r7, #15]
			break;
 8000418:	e011      	b.n	800043e <Get_CRLH_Position+0xae>
			PinPos = 8;
 800041a:	2308      	movs	r3, #8
 800041c:	73fb      	strb	r3, [r7, #15]
			break;
 800041e:	e00e      	b.n	800043e <Get_CRLH_Position+0xae>
			PinPos = 12;
 8000420:	230c      	movs	r3, #12
 8000422:	73fb      	strb	r3, [r7, #15]
			break;
 8000424:	e00b      	b.n	800043e <Get_CRLH_Position+0xae>
			PinPos = 16;
 8000426:	2310      	movs	r3, #16
 8000428:	73fb      	strb	r3, [r7, #15]
			break;
 800042a:	e008      	b.n	800043e <Get_CRLH_Position+0xae>
			PinPos = 20;
 800042c:	2314      	movs	r3, #20
 800042e:	73fb      	strb	r3, [r7, #15]
			break;
 8000430:	e005      	b.n	800043e <Get_CRLH_Position+0xae>
			PinPos = 24;
 8000432:	2318      	movs	r3, #24
 8000434:	73fb      	strb	r3, [r7, #15]
			break;
 8000436:	e002      	b.n	800043e <Get_CRLH_Position+0xae>
			PinPos = 28;
 8000438:	231c      	movs	r3, #28
 800043a:	73fb      	strb	r3, [r7, #15]
			break;
 800043c:	bf00      	nop
	}
	return PinPos;
 800043e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000440:	4618      	mov	r0, r3
 8000442:	3714      	adds	r7, #20
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr

0800044a <MCAL_GPIO_Init>:
 * @param [in] 		-GPIOx: Where x can be (A..E depending on device used) to select the GPIO peripheral
 * @param [in] 		-PinConfig pointer to a GPIO_PinConfig_t structure that contains the configuration information for the specified GPIO peripheral
 * @retval 			-None
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules But LQFP48 Package has only GPIO A,B,Part of C,D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig){
 800044a:	b590      	push	{r4, r7, lr}
 800044c:	b085      	sub	sp, #20
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
 8000452:	6039      	str	r1, [r7, #0]
	/**
	 * Port configuration register low (GPIOx_CRL) Configure PINS from 0 >> 7
	 * Port configuration register high (GPIOx_CRH) Configure PINS from 8 >> 15
	 */
	volatile uint32_t *ConfigRegister = (PinConfig->pinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	2bff      	cmp	r3, #255	; 0xff
 800045a:	d801      	bhi.n	8000460 <MCAL_GPIO_Init+0x16>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	e001      	b.n	8000464 <MCAL_GPIO_Init+0x1a>
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	3304      	adds	r3, #4
 8000464:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	73fb      	strb	r3, [r7, #15]

	/* clear CNFx[1:0] MODEx[1:0] [4 bits] */
	*ConfigRegister &= ~(0xf << Get_CRLH_Position(PinConfig->pinNumber));
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	881b      	ldrh	r3, [r3, #0]
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ff8e 	bl	8000390 <Get_CRLH_Position>
 8000474:	4603      	mov	r3, r0
 8000476:	461a      	mov	r2, r3
 8000478:	230f      	movs	r3, #15
 800047a:	4093      	lsls	r3, r2
 800047c:	43da      	mvns	r2, r3
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	401a      	ands	r2, r3
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	601a      	str	r2, [r3, #0]

	/* check if output mode */
	if(
			(PinConfig->mode == GPIO_MODE_OUTPUT_PP)	||
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	789b      	ldrb	r3, [r3, #2]
	if(
 800048c:	2b04      	cmp	r3, #4
 800048e:	d00b      	beq.n	80004a8 <MCAL_GPIO_Init+0x5e>
			(PinConfig->mode == GPIO_MODE_OUTPUT_OD)	||
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	789b      	ldrb	r3, [r3, #2]
			(PinConfig->mode == GPIO_MODE_OUTPUT_PP)	||
 8000494:	2b05      	cmp	r3, #5
 8000496:	d007      	beq.n	80004a8 <MCAL_GPIO_Init+0x5e>
			(PinConfig->mode == GPIO_MODE_OUTPUT_AF_PP)	||
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	789b      	ldrb	r3, [r3, #2]
			(PinConfig->mode == GPIO_MODE_OUTPUT_OD)	||
 800049c:	2b06      	cmp	r3, #6
 800049e:	d003      	beq.n	80004a8 <MCAL_GPIO_Init+0x5e>
			(PinConfig->mode == GPIO_MODE_OUTPUT_AF_OD)
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	789b      	ldrb	r3, [r3, #2]
			(PinConfig->mode == GPIO_MODE_OUTPUT_AF_PP)	||
 80004a4:	2b07      	cmp	r3, #7
 80004a6:	d10e      	bne.n	80004c6 <MCAL_GPIO_Init+0x7c>
		){
			pin_config = ( (( (PinConfig->mode - 4) << 2 ) | (PinConfig->outputSpeed)) & 0x0f);
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	789b      	ldrb	r3, [r3, #2]
 80004ac:	3b04      	subs	r3, #4
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	b25a      	sxtb	r2, r3
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	78db      	ldrb	r3, [r3, #3]
 80004b6:	b25b      	sxtb	r3, r3
 80004b8:	4313      	orrs	r3, r2
 80004ba:	b25b      	sxtb	r3, r3
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	f003 030f 	and.w	r3, r3, #15
 80004c2:	73fb      	strb	r3, [r7, #15]
 80004c4:	e02c      	b.n	8000520 <MCAL_GPIO_Init+0xd6>
		}
	else{
		if(
				(PinConfig->mode == GPIO_MODE_ANALOG)			||
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	789b      	ldrb	r3, [r3, #2]
		if(
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d003      	beq.n	80004d6 <MCAL_GPIO_Init+0x8c>
				(PinConfig->mode == GPIO_MODE_INPUT_FLOATING)
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	789b      	ldrb	r3, [r3, #2]
				(PinConfig->mode == GPIO_MODE_ANALOG)			||
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d107      	bne.n	80004e6 <MCAL_GPIO_Init+0x9c>
			){
			pin_config = ( ((PinConfig->mode) << 2) & 0x0f);
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	789b      	ldrb	r3, [r3, #2]
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	f003 030f 	and.w	r3, r3, #15
 80004e2:	73fb      	strb	r3, [r7, #15]
 80004e4:	e01c      	b.n	8000520 <MCAL_GPIO_Init+0xd6>
		}
		else if(PinConfig->mode == GPIO_MODE_AF_INPUT){ /* considered as floating input */
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	789b      	ldrb	r3, [r3, #2]
 80004ea:	2b08      	cmp	r3, #8
 80004ec:	d102      	bne.n	80004f4 <MCAL_GPIO_Init+0xaa>
			pin_config = ( (GPIO_MODE_INPUT_FLOATING << 2) & 0x0f);
 80004ee:	2304      	movs	r3, #4
 80004f0:	73fb      	strb	r3, [r7, #15]
 80004f2:	e015      	b.n	8000520 <MCAL_GPIO_Init+0xd6>
		}
		else{
			pin_config = ( (GPIO_MODE_INPUT_PU << 2) & 0x0f);
 80004f4:	2308      	movs	r3, #8
 80004f6:	73fb      	strb	r3, [r7, #15]
			//to select between PullUp and PullDown modes
			if(PinConfig->mode == GPIO_MODE_INPUT_PU){
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	789b      	ldrb	r3, [r3, #2]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d107      	bne.n	8000510 <MCAL_GPIO_Init+0xc6>
				/* Table 20. Port bit configuration table : PxODR -> 0 */
				GPIOx->ODR |= (PinConfig->pinNumber);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	683a      	ldr	r2, [r7, #0]
 8000506:	8812      	ldrh	r2, [r2, #0]
 8000508:	431a      	orrs	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	e007      	b.n	8000520 <MCAL_GPIO_Init+0xd6>
			}
			else{
				/* Table 20. Port bit configuration table : PxODR -> 1 */
				GPIOx->ODR &= ~(PinConfig->pinNumber);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	683a      	ldr	r2, [r7, #0]
 8000516:	8812      	ldrh	r2, [r2, #0]
 8000518:	43d2      	mvns	r2, r2
 800051a:	401a      	ands	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	60da      	str	r2, [r3, #12]
			}
		}
	}
	/* write on CRL or CRH */
	*ConfigRegister |= ((pin_config) << Get_CRLH_Position(PinConfig->pinNumber));
 8000520:	7bfc      	ldrb	r4, [r7, #15]
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff ff32 	bl	8000390 <Get_CRLH_Position>
 800052c:	4603      	mov	r3, r0
 800052e:	fa04 f203 	lsl.w	r2, r4, r3
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	431a      	orrs	r2, r3
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	601a      	str	r2, [r3, #0]
}
 800053c:	bf00      	nop
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	bd90      	pop	{r4, r7, pc}

08000544 <MCAL_GPIO_ReadPin>:
 * @param [in] 		-GPIOx: Where x can be (A..E depending on device used) to select the GPIO peripheral
 * @param [in]		-PinNumber: Set Pin number According to @ref GPIO_PIN_define
 * @retval 			-the input pin value (two values based on @ref GPIO_PIN_state)
 * Note				-None
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber){
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	807b      	strh	r3, [r7, #2]
	return (GPIOx->IDR & PinNumber) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	689a      	ldr	r2, [r3, #8]
 8000554:	887b      	ldrh	r3, [r7, #2]
 8000556:	4013      	ands	r3, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	bf14      	ite	ne
 800055c:	2301      	movne	r3, #1
 800055e:	2300      	moveq	r3, #0
 8000560:	b2db      	uxtb	r3, r3
}
 8000562:	4618      	mov	r0, r3
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr

0800056c <MCAL_GPIO_TogglePin>:
 * @param [in] 		-GPIOx: Where x can be (A..G depending on device used) to select the GPIO peripheral
 * @param [in]		-PinNumber: specifies the port bit to read. Set By @ref GPIO_PINS_define
 * @retval 			-None
 * Note				-None
 */
void MCAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber){
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= (uint32_t)PinNumber;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	68da      	ldr	r2, [r3, #12]
 800057c:	887b      	ldrh	r3, [r7, #2]
 800057e:	405a      	eors	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	60da      	str	r2, [r3, #12]
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr
	...

08000590 <SPI1_IRQHandler>:

/*******************************************************/
/****************** ISR Functions **********************/
/*******************************************************/

void SPI1_IRQHandler(void){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_SCR;

	irq_SCR.TXE  = ((SPI1->SR & (1<<1)) >> 1);
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <SPI1_IRQHandler+0x54>)
 8000598:	689b      	ldr	r3, [r3, #8]
 800059a:	085b      	lsrs	r3, r3, #1
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	793b      	ldrb	r3, [r7, #4]
 80005a4:	f362 0300 	bfi	r3, r2, #0, #1
 80005a8:	713b      	strb	r3, [r7, #4]
	irq_SCR.RXNE = ((SPI1->SR & (1<<0)) >> 0);
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <SPI1_IRQHandler+0x54>)
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	793b      	ldrb	r3, [r7, #4]
 80005b6:	f362 0341 	bfi	r3, r2, #1, #1
 80005ba:	713b      	strb	r3, [r7, #4]
	irq_SCR.ERRI = ((SPI1->SR & (1<<4)) >> 4);
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <SPI1_IRQHandler+0x54>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	091b      	lsrs	r3, r3, #4
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	793b      	ldrb	r3, [r7, #4]
 80005ca:	f362 0382 	bfi	r3, r2, #2, #1
 80005ce:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_Index]->P_IRQ_Callback(irq_SCR);
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <SPI1_IRQHandler+0x58>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	7938      	ldrb	r0, [r7, #4]
 80005d8:	4798      	blx	r3
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40013000 	.word	0x40013000
 80005e8:	2000001c 	.word	0x2000001c

080005ec <SPI2_IRQHandler>:

void SPI2_IRQHandler(void){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_SCR;

	irq_SCR.TXE  = ((SPI2->SR & (1<<1)) >> 1);
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <SPI2_IRQHandler+0x54>)
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	085b      	lsrs	r3, r3, #1
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	793b      	ldrb	r3, [r7, #4]
 8000600:	f362 0300 	bfi	r3, r2, #0, #1
 8000604:	713b      	strb	r3, [r7, #4]
	irq_SCR.RXNE = ((SPI2->SR & (1<<0)) >> 0);
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <SPI2_IRQHandler+0x54>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	b2da      	uxtb	r2, r3
 8000610:	793b      	ldrb	r3, [r7, #4]
 8000612:	f362 0341 	bfi	r3, r2, #1, #1
 8000616:	713b      	strb	r3, [r7, #4]
	irq_SCR.ERRI = ((SPI2->SR & (1<<4)) >> 4);
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <SPI2_IRQHandler+0x54>)
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	b2da      	uxtb	r2, r3
 8000624:	793b      	ldrb	r3, [r7, #4]
 8000626:	f362 0382 	bfi	r3, r2, #2, #1
 800062a:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_Index]->P_IRQ_Callback(irq_SCR);
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <SPI2_IRQHandler+0x58>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	7938      	ldrb	r0, [r7, #4]
 8000634:	4798      	blx	r3
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40003800 	.word	0x40003800
 8000644:	2000001c 	.word	0x2000001c

08000648 <clockInit>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include "STM32F103x8_GPIO_Driver.h"

void clockInit(){
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN(); /* Enable IOPA */
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <clockInit+0x24>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a06      	ldr	r2, [pc, #24]	; (800066c <clockInit+0x24>)
 8000652:	f043 0304 	orr.w	r3, r3, #4
 8000656:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN(); /* Enable IOPB */
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <clockInit+0x24>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a03      	ldr	r2, [pc, #12]	; (800066c <clockInit+0x24>)
 800065e:	f043 0308 	orr.w	r3, r3, #8
 8000662:	6193      	str	r3, [r2, #24]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	40021000 	.word	0x40021000

08000670 <GPIO_Init>:

void GPIO_Init(){
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t *PinConfig = NULL;
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]

	/* PA1 input HighZ floating input (reset value) */
	PinConfig->pinNumber = GPIO_PIN_1;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2202      	movs	r2, #2
 800067e:	801a      	strh	r2, [r3, #0]
	PinConfig->mode = GPIO_MODE_INPUT_FLOATING;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2201      	movs	r2, #1
 8000684:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, PinConfig);
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	4813      	ldr	r0, [pc, #76]	; (80006d8 <GPIO_Init+0x68>)
 800068a:	f7ff fede 	bl	800044a <MCAL_GPIO_Init>

	/* PA13 input HighZ floating input (reset value) */
	PinConfig->pinNumber = GPIO_PIN_13;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000694:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOA, PinConfig);
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	480f      	ldr	r0, [pc, #60]	; (80006d8 <GPIO_Init+0x68>)
 800069a:	f7ff fed6 	bl	800044a <MCAL_GPIO_Init>

	/* PB1 output push pull mode */
	PinConfig->pinNumber = GPIO_PIN_1;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2202      	movs	r2, #2
 80006a2:	801a      	strh	r2, [r3, #0]
	PinConfig->mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2204      	movs	r2, #4
 80006a8:	709a      	strb	r2, [r3, #2]
	PinConfig->outputSpeed = GPIO_SPEED_10M;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2201      	movs	r2, #1
 80006ae:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, PinConfig);
 80006b0:	6879      	ldr	r1, [r7, #4]
 80006b2:	480a      	ldr	r0, [pc, #40]	; (80006dc <GPIO_Init+0x6c>)
 80006b4:	f7ff fec9 	bl	800044a <MCAL_GPIO_Init>

	/* PB13 output push pull mode */
	PinConfig->pinNumber = GPIO_PIN_13;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006be:	801a      	strh	r2, [r3, #0]
	PinConfig->mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2204      	movs	r2, #4
 80006c4:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOB, PinConfig);
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <GPIO_Init+0x6c>)
 80006ca:	f7ff febe 	bl	800044a <MCAL_GPIO_Init>
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40010800 	.word	0x40010800
 80006dc:	40010c00 	.word	0x40010c00

080006e0 <myWait>:

void myWait(){
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 50000; i++);
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	e002      	b.n	80006f2 <myWait+0x12>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3301      	adds	r3, #1
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80006f8:	4293      	cmp	r3, r2
 80006fa:	ddf7      	ble.n	80006ec <myWait+0xc>
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
	...

08000708 <main>:

int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	clockInit();
 800070c:	f7ff ff9c 	bl	8000648 <clockInit>
	GPIO_Init();
 8000710:	f7ff ffae 	bl	8000670 <GPIO_Init>
	while(1){
		if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0){
 8000714:	2102      	movs	r1, #2
 8000716:	4811      	ldr	r0, [pc, #68]	; (800075c <main+0x54>)
 8000718:	f7ff ff14 	bl	8000544 <MCAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d10b      	bne.n	800073a <main+0x32>
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000722:	2102      	movs	r1, #2
 8000724:	480e      	ldr	r0, [pc, #56]	; (8000760 <main+0x58>)
 8000726:	f7ff ff21 	bl	800056c <MCAL_GPIO_TogglePin>
			while (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0); /* Single Press */
 800072a:	bf00      	nop
 800072c:	2102      	movs	r1, #2
 800072e:	480b      	ldr	r0, [pc, #44]	; (800075c <main+0x54>)
 8000730:	f7ff ff08 	bl	8000544 <MCAL_GPIO_ReadPin>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0f8      	beq.n	800072c <main+0x24>
		}
		if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == 1){
 800073a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073e:	4807      	ldr	r0, [pc, #28]	; (800075c <main+0x54>)
 8000740:	f7ff ff00 	bl	8000544 <MCAL_GPIO_ReadPin>
 8000744:	4603      	mov	r3, r0
 8000746:	2b01      	cmp	r3, #1
 8000748:	d104      	bne.n	8000754 <main+0x4c>
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13); /* Multiple Press */
 800074a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074e:	4804      	ldr	r0, [pc, #16]	; (8000760 <main+0x58>)
 8000750:	f7ff ff0c 	bl	800056c <MCAL_GPIO_TogglePin>
		}
		myWait();
 8000754:	f7ff ffc4 	bl	80006e0 <myWait>
		if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0){
 8000758:	e7dc      	b.n	8000714 <main+0xc>
 800075a:	bf00      	nop
 800075c:	40010800 	.word	0x40010800
 8000760:	40010c00 	.word	0x40010c00

08000764 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000766:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000768:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800076e:	490d      	ldr	r1, [pc, #52]	; (80007a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000770:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <LoopForever+0xe>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000774:	e002      	b.n	800077c <LoopCopyDataInit>

08000776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077a:	3304      	adds	r3, #4

0800077c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800077c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000780:	d3f9      	bcc.n	8000776 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000784:	4c0a      	ldr	r4, [pc, #40]	; (80007b0 <LoopForever+0x16>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000788:	e001      	b.n	800078e <LoopFillZerobss>

0800078a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800078c:	3204      	adds	r2, #4

0800078e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000790:	d3fb      	bcc.n	800078a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000792:	f000 f811 	bl	80007b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000796:	f7ff ffb7 	bl	8000708 <main>

0800079a <LoopForever>:

LoopForever:
    b LoopForever
 800079a:	e7fe      	b.n	800079a <LoopForever>
  ldr   r0, =_estack
 800079c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80007a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007a8:	08000820 	.word	0x08000820
  ldr r2, =_sbss
 80007ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007b0:	20000064 	.word	0x20000064

080007b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b4:	e7fe      	b.n	80007b4 <ADC1_2_IRQHandler>
	...

080007b8 <__libc_init_array>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	2500      	movs	r5, #0
 80007bc:	4e0c      	ldr	r6, [pc, #48]	; (80007f0 <__libc_init_array+0x38>)
 80007be:	4c0d      	ldr	r4, [pc, #52]	; (80007f4 <__libc_init_array+0x3c>)
 80007c0:	1ba4      	subs	r4, r4, r6
 80007c2:	10a4      	asrs	r4, r4, #2
 80007c4:	42a5      	cmp	r5, r4
 80007c6:	d109      	bne.n	80007dc <__libc_init_array+0x24>
 80007c8:	f000 f81a 	bl	8000800 <_init>
 80007cc:	2500      	movs	r5, #0
 80007ce:	4e0a      	ldr	r6, [pc, #40]	; (80007f8 <__libc_init_array+0x40>)
 80007d0:	4c0a      	ldr	r4, [pc, #40]	; (80007fc <__libc_init_array+0x44>)
 80007d2:	1ba4      	subs	r4, r4, r6
 80007d4:	10a4      	asrs	r4, r4, #2
 80007d6:	42a5      	cmp	r5, r4
 80007d8:	d105      	bne.n	80007e6 <__libc_init_array+0x2e>
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007e0:	4798      	blx	r3
 80007e2:	3501      	adds	r5, #1
 80007e4:	e7ee      	b.n	80007c4 <__libc_init_array+0xc>
 80007e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007ea:	4798      	blx	r3
 80007ec:	3501      	adds	r5, #1
 80007ee:	e7f2      	b.n	80007d6 <__libc_init_array+0x1e>
 80007f0:	08000818 	.word	0x08000818
 80007f4:	08000818 	.word	0x08000818
 80007f8:	08000818 	.word	0x08000818
 80007fc:	0800081c 	.word	0x0800081c

08000800 <_init>:
 8000800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000802:	bf00      	nop
 8000804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000806:	bc08      	pop	{r3}
 8000808:	469e      	mov	lr, r3
 800080a:	4770      	bx	lr

0800080c <_fini>:
 800080c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800080e:	bf00      	nop
 8000810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000812:	bc08      	pop	{r3}
 8000814:	469e      	mov	lr, r3
 8000816:	4770      	bx	lr
