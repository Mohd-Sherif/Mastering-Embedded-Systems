
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000410  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000540  08000548  00010548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000540  08000540  00010548  2**0
                  CONTENTS
  4 .ARM          00000000  08000540  08000540  00010548  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000540  08000548  00010548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000540  08000540  00010540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000544  08000544  00010544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000548  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000548  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010548  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001907  00000000  00000000  00010571  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000003cb  00000000  00000000  00011e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000044c  00000000  00000000  00012243  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000c0  00000000  00000000  00012690  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  00012750  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000348  00000000  00000000  000127e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000caf  00000000  00000000  00012b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007bda  00000000  00000000  000137df  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001b3b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000023c  00000000  00000000  0001b434  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000528 	.word	0x08000528

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000528 	.word	0x08000528

08000170 <Get_CRLH_Position>:
 * @param [in] 		-PinNumber
 * @retval 			-PinPos
 * Note				-None
 */
static uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	uint8_t PinPos = 0;
 800017a:	2300      	movs	r3, #0
 800017c:	73fb      	strb	r3, [r7, #15]
	switch (PinNumber){
 800017e:	88fb      	ldrh	r3, [r7, #6]
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	d049      	beq.n	8000218 <Get_CRLH_Position+0xa8>
 8000184:	2b80      	cmp	r3, #128	; 0x80
 8000186:	dc11      	bgt.n	80001ac <Get_CRLH_Position+0x3c>
 8000188:	2b08      	cmp	r3, #8
 800018a:	d039      	beq.n	8000200 <Get_CRLH_Position+0x90>
 800018c:	2b08      	cmp	r3, #8
 800018e:	dc06      	bgt.n	800019e <Get_CRLH_Position+0x2e>
 8000190:	2b02      	cmp	r3, #2
 8000192:	d02f      	beq.n	80001f4 <Get_CRLH_Position+0x84>
 8000194:	2b04      	cmp	r3, #4
 8000196:	d030      	beq.n	80001fa <Get_CRLH_Position+0x8a>
 8000198:	2b01      	cmp	r3, #1
 800019a:	d028      	beq.n	80001ee <Get_CRLH_Position+0x7e>
		case GPIO_PIN_15:
			PinPos = 28;
			break;
		default :
			/* Do nothing */
			break;
 800019c:	e03f      	b.n	800021e <Get_CRLH_Position+0xae>
	switch (PinNumber){
 800019e:	2b20      	cmp	r3, #32
 80001a0:	d034      	beq.n	800020c <Get_CRLH_Position+0x9c>
 80001a2:	2b40      	cmp	r3, #64	; 0x40
 80001a4:	d035      	beq.n	8000212 <Get_CRLH_Position+0xa2>
 80001a6:	2b10      	cmp	r3, #16
 80001a8:	d02d      	beq.n	8000206 <Get_CRLH_Position+0x96>
			break;
 80001aa:	e038      	b.n	800021e <Get_CRLH_Position+0xae>
	switch (PinNumber){
 80001ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b0:	d026      	beq.n	8000200 <Get_CRLH_Position+0x90>
 80001b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b6:	dc09      	bgt.n	80001cc <Get_CRLH_Position+0x5c>
 80001b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001bc:	d01a      	beq.n	80001f4 <Get_CRLH_Position+0x84>
 80001be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001c2:	d01a      	beq.n	80001fa <Get_CRLH_Position+0x8a>
 80001c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c8:	d011      	beq.n	80001ee <Get_CRLH_Position+0x7e>
			break;
 80001ca:	e028      	b.n	800021e <Get_CRLH_Position+0xae>
	switch (PinNumber){
 80001cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d0:	d01c      	beq.n	800020c <Get_CRLH_Position+0x9c>
 80001d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d6:	dc03      	bgt.n	80001e0 <Get_CRLH_Position+0x70>
 80001d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001dc:	d013      	beq.n	8000206 <Get_CRLH_Position+0x96>
			break;
 80001de:	e01e      	b.n	800021e <Get_CRLH_Position+0xae>
	switch (PinNumber){
 80001e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e4:	d015      	beq.n	8000212 <Get_CRLH_Position+0xa2>
 80001e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001ea:	d015      	beq.n	8000218 <Get_CRLH_Position+0xa8>
			break;
 80001ec:	e017      	b.n	800021e <Get_CRLH_Position+0xae>
			PinPos = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	73fb      	strb	r3, [r7, #15]
			break;
 80001f2:	e014      	b.n	800021e <Get_CRLH_Position+0xae>
			PinPos = 4;
 80001f4:	2304      	movs	r3, #4
 80001f6:	73fb      	strb	r3, [r7, #15]
			break;
 80001f8:	e011      	b.n	800021e <Get_CRLH_Position+0xae>
			PinPos = 8;
 80001fa:	2308      	movs	r3, #8
 80001fc:	73fb      	strb	r3, [r7, #15]
			break;
 80001fe:	e00e      	b.n	800021e <Get_CRLH_Position+0xae>
			PinPos = 12;
 8000200:	230c      	movs	r3, #12
 8000202:	73fb      	strb	r3, [r7, #15]
			break;
 8000204:	e00b      	b.n	800021e <Get_CRLH_Position+0xae>
			PinPos = 16;
 8000206:	2310      	movs	r3, #16
 8000208:	73fb      	strb	r3, [r7, #15]
			break;
 800020a:	e008      	b.n	800021e <Get_CRLH_Position+0xae>
			PinPos = 20;
 800020c:	2314      	movs	r3, #20
 800020e:	73fb      	strb	r3, [r7, #15]
			break;
 8000210:	e005      	b.n	800021e <Get_CRLH_Position+0xae>
			PinPos = 24;
 8000212:	2318      	movs	r3, #24
 8000214:	73fb      	strb	r3, [r7, #15]
			break;
 8000216:	e002      	b.n	800021e <Get_CRLH_Position+0xae>
			PinPos = 28;
 8000218:	231c      	movs	r3, #28
 800021a:	73fb      	strb	r3, [r7, #15]
			break;
 800021c:	bf00      	nop
	}
	return PinPos;
 800021e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000220:	4618      	mov	r0, r3
 8000222:	3714      	adds	r7, #20
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr

0800022a <MCAL_GPIO_Init>:
 * @param [in] 		-GPIOx: Where x can be (A..E depending on device used) to select the GPIO peripheral
 * @param [in] 		-PinConfig pointer to a GPIO_PinConfig_t structure that contains the configuration information for the specified GPIO peripheral
 * @retval 			-None
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules But LQFP48 Package has only GPIO A,B,Part of C,D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig){
 800022a:	b590      	push	{r4, r7, lr}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	6039      	str	r1, [r7, #0]
	/**
	 * Port configuration register low (GPIOx_CRL) Configure PINS from 0 >> 7
	 * Port configuration register high (GPIOx_CRH) Configure PINS from 8 >> 15
	 */
	volatile uint32_t *ConfigRegister = (PinConfig->pinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	881b      	ldrh	r3, [r3, #0]
 8000238:	2bff      	cmp	r3, #255	; 0xff
 800023a:	d801      	bhi.n	8000240 <MCAL_GPIO_Init+0x16>
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	e001      	b.n	8000244 <MCAL_GPIO_Init+0x1a>
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	3304      	adds	r3, #4
 8000244:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config = 0;
 8000246:	2300      	movs	r3, #0
 8000248:	73fb      	strb	r3, [r7, #15]

	/* clear CNFx[1:0] MODEx[1:0] [4 bits] */
	*ConfigRegister &= ~(0xf << Get_CRLH_Position(PinConfig->pinNumber));
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	881b      	ldrh	r3, [r3, #0]
 800024e:	4618      	mov	r0, r3
 8000250:	f7ff ff8e 	bl	8000170 <Get_CRLH_Position>
 8000254:	4603      	mov	r3, r0
 8000256:	461a      	mov	r2, r3
 8000258:	230f      	movs	r3, #15
 800025a:	4093      	lsls	r3, r2
 800025c:	43da      	mvns	r2, r3
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	401a      	ands	r2, r3
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	601a      	str	r2, [r3, #0]

	/* check if output mode */
	if(
			(PinConfig->mode == GPIO_MODE_OUTPUT_PP)	||
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	789b      	ldrb	r3, [r3, #2]
	if(
 800026c:	2b04      	cmp	r3, #4
 800026e:	d00b      	beq.n	8000288 <MCAL_GPIO_Init+0x5e>
			(PinConfig->mode == GPIO_MODE_OUTPUT_OD)	||
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	789b      	ldrb	r3, [r3, #2]
			(PinConfig->mode == GPIO_MODE_OUTPUT_PP)	||
 8000274:	2b05      	cmp	r3, #5
 8000276:	d007      	beq.n	8000288 <MCAL_GPIO_Init+0x5e>
			(PinConfig->mode == GPIO_MODE_OUTPUT_AF_PP)	||
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	789b      	ldrb	r3, [r3, #2]
			(PinConfig->mode == GPIO_MODE_OUTPUT_OD)	||
 800027c:	2b06      	cmp	r3, #6
 800027e:	d003      	beq.n	8000288 <MCAL_GPIO_Init+0x5e>
			(PinConfig->mode == GPIO_MODE_OUTPUT_AF_OD)
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	789b      	ldrb	r3, [r3, #2]
			(PinConfig->mode == GPIO_MODE_OUTPUT_AF_PP)	||
 8000284:	2b07      	cmp	r3, #7
 8000286:	d10e      	bne.n	80002a6 <MCAL_GPIO_Init+0x7c>
		){
			pin_config = ( (( (PinConfig->mode - 4) << 2 ) | (PinConfig->outputSpeed)) & 0x0f);
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	789b      	ldrb	r3, [r3, #2]
 800028c:	3b04      	subs	r3, #4
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	b25a      	sxtb	r2, r3
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	78db      	ldrb	r3, [r3, #3]
 8000296:	b25b      	sxtb	r3, r3
 8000298:	4313      	orrs	r3, r2
 800029a:	b25b      	sxtb	r3, r3
 800029c:	b2db      	uxtb	r3, r3
 800029e:	f003 030f 	and.w	r3, r3, #15
 80002a2:	73fb      	strb	r3, [r7, #15]
 80002a4:	e02c      	b.n	8000300 <MCAL_GPIO_Init+0xd6>
		}
	else{
		if(
				(PinConfig->mode == GPIO_MODE_ANALOG)			||
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	789b      	ldrb	r3, [r3, #2]
		if(
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d003      	beq.n	80002b6 <MCAL_GPIO_Init+0x8c>
				(PinConfig->mode == GPIO_MODE_INPUT_FLOATING)
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	789b      	ldrb	r3, [r3, #2]
				(PinConfig->mode == GPIO_MODE_ANALOG)			||
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d107      	bne.n	80002c6 <MCAL_GPIO_Init+0x9c>
			){
			pin_config = ( ((PinConfig->mode) << 2) & 0x0f);
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	789b      	ldrb	r3, [r3, #2]
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	f003 030f 	and.w	r3, r3, #15
 80002c2:	73fb      	strb	r3, [r7, #15]
 80002c4:	e01c      	b.n	8000300 <MCAL_GPIO_Init+0xd6>
		}
		else if(PinConfig->mode == GPIO_MODE_AF_INPUT){ /* considered as floating input */
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	789b      	ldrb	r3, [r3, #2]
 80002ca:	2b08      	cmp	r3, #8
 80002cc:	d102      	bne.n	80002d4 <MCAL_GPIO_Init+0xaa>
			pin_config = ( (GPIO_MODE_INPUT_FLOATING << 2) & 0x0f);
 80002ce:	2304      	movs	r3, #4
 80002d0:	73fb      	strb	r3, [r7, #15]
 80002d2:	e015      	b.n	8000300 <MCAL_GPIO_Init+0xd6>
		}
		else{
			pin_config = ( (GPIO_MODE_INPUT_PU << 2) & 0x0f);
 80002d4:	2308      	movs	r3, #8
 80002d6:	73fb      	strb	r3, [r7, #15]
			//to select between PullUp and PullDown modes
			if(PinConfig->mode == GPIO_MODE_INPUT_PU){
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	789b      	ldrb	r3, [r3, #2]
 80002dc:	2b02      	cmp	r3, #2
 80002de:	d107      	bne.n	80002f0 <MCAL_GPIO_Init+0xc6>
				/* Table 20. Port bit configuration table : PxODR -> 0 */
				GPIOx->ODR |= (PinConfig->pinNumber);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	683a      	ldr	r2, [r7, #0]
 80002e6:	8812      	ldrh	r2, [r2, #0]
 80002e8:	431a      	orrs	r2, r3
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	e007      	b.n	8000300 <MCAL_GPIO_Init+0xd6>
			}
			else{
				/* Table 20. Port bit configuration table : PxODR -> 1 */
				GPIOx->ODR &= ~(PinConfig->pinNumber);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	683a      	ldr	r2, [r7, #0]
 80002f6:	8812      	ldrh	r2, [r2, #0]
 80002f8:	43d2      	mvns	r2, r2
 80002fa:	401a      	ands	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	60da      	str	r2, [r3, #12]
			}
		}
	}
	/* write on CRL or CRH */
	*ConfigRegister |= ((pin_config) << Get_CRLH_Position(PinConfig->pinNumber));
 8000300:	7bfc      	ldrb	r4, [r7, #15]
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	881b      	ldrh	r3, [r3, #0]
 8000306:	4618      	mov	r0, r3
 8000308:	f7ff ff32 	bl	8000170 <Get_CRLH_Position>
 800030c:	4603      	mov	r3, r0
 800030e:	fa04 f203 	lsl.w	r2, r4, r3
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	431a      	orrs	r2, r3
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	bf00      	nop
 800031e:	3714      	adds	r7, #20
 8000320:	46bd      	mov	sp, r7
 8000322:	bd90      	pop	{r4, r7, pc}

08000324 <MCAL_GPIO_ReadPin>:
 * @param [in] 		-GPIOx: Where x can be (A..E depending on device used) to select the GPIO peripheral
 * @param [in]		-PinNumber: Set Pin number According to @ref GPIO_PIN_define
 * @retval 			-the input pin value (two values based on @ref GPIO_PIN_state)
 * Note				-None
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber){
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	807b      	strh	r3, [r7, #2]
	return (GPIOx->IDR & PinNumber) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	689a      	ldr	r2, [r3, #8]
 8000334:	887b      	ldrh	r3, [r7, #2]
 8000336:	4013      	ands	r3, r2
 8000338:	2b00      	cmp	r3, #0
 800033a:	bf14      	ite	ne
 800033c:	2301      	movne	r3, #1
 800033e:	2300      	moveq	r3, #0
 8000340:	b2db      	uxtb	r3, r3
}
 8000342:	4618      	mov	r0, r3
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr

0800034c <MCAL_GPIO_TogglePin>:
 * @param [in] 		-GPIOx: Where x can be (A..G depending on device used) to select the GPIO peripheral
 * @param [in]		-PinNumber: specifies the port bit to read. Set By @ref GPIO_PINS_define
 * @retval 			-None
 * Note				-None
 */
void MCAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber){
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= (uint32_t)PinNumber;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	68da      	ldr	r2, [r3, #12]
 800035c:	887b      	ldrh	r3, [r7, #2]
 800035e:	405a      	eors	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	60da      	str	r2, [r3, #12]
}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
	...

08000370 <clockInit>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include "STM32F103x8_GPIO_Driver.h"

void clockInit(){
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN(); /* Enable IOPA */
 8000374:	4b07      	ldr	r3, [pc, #28]	; (8000394 <clockInit+0x24>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a06      	ldr	r2, [pc, #24]	; (8000394 <clockInit+0x24>)
 800037a:	f043 0304 	orr.w	r3, r3, #4
 800037e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN(); /* Enable IOPB */
 8000380:	4b04      	ldr	r3, [pc, #16]	; (8000394 <clockInit+0x24>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a03      	ldr	r2, [pc, #12]	; (8000394 <clockInit+0x24>)
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	6193      	str	r3, [r2, #24]
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr
 8000394:	40021000 	.word	0x40021000

08000398 <GPIO_Init>:

void GPIO_Init(){
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t *PinConfig = NULL;
 800039e:	2300      	movs	r3, #0
 80003a0:	607b      	str	r3, [r7, #4]

	/* PA1 input HighZ floating input (reset value) */
	PinConfig->pinNumber = GPIO_PIN_1;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2202      	movs	r2, #2
 80003a6:	801a      	strh	r2, [r3, #0]
	PinConfig->mode = GPIO_MODE_INPUT_FLOATING;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2201      	movs	r2, #1
 80003ac:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, PinConfig);
 80003ae:	6879      	ldr	r1, [r7, #4]
 80003b0:	4813      	ldr	r0, [pc, #76]	; (8000400 <GPIO_Init+0x68>)
 80003b2:	f7ff ff3a 	bl	800022a <MCAL_GPIO_Init>

	/* PA13 input HighZ floating input (reset value) */
	PinConfig->pinNumber = GPIO_PIN_13;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003bc:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOA, PinConfig);
 80003be:	6879      	ldr	r1, [r7, #4]
 80003c0:	480f      	ldr	r0, [pc, #60]	; (8000400 <GPIO_Init+0x68>)
 80003c2:	f7ff ff32 	bl	800022a <MCAL_GPIO_Init>

	/* PB1 output push pull mode */
	PinConfig->pinNumber = GPIO_PIN_1;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2202      	movs	r2, #2
 80003ca:	801a      	strh	r2, [r3, #0]
	PinConfig->mode = GPIO_MODE_OUTPUT_PP;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2204      	movs	r2, #4
 80003d0:	709a      	strb	r2, [r3, #2]
	PinConfig->outputSpeed = GPIO_SPEED_10M;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2201      	movs	r2, #1
 80003d6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, PinConfig);
 80003d8:	6879      	ldr	r1, [r7, #4]
 80003da:	480a      	ldr	r0, [pc, #40]	; (8000404 <GPIO_Init+0x6c>)
 80003dc:	f7ff ff25 	bl	800022a <MCAL_GPIO_Init>

	/* PB13 output push pull mode */
	PinConfig->pinNumber = GPIO_PIN_13;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003e6:	801a      	strh	r2, [r3, #0]
	PinConfig->mode = GPIO_MODE_OUTPUT_PP;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2204      	movs	r2, #4
 80003ec:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOB, PinConfig);
 80003ee:	6879      	ldr	r1, [r7, #4]
 80003f0:	4804      	ldr	r0, [pc, #16]	; (8000404 <GPIO_Init+0x6c>)
 80003f2:	f7ff ff1a 	bl	800022a <MCAL_GPIO_Init>
}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40010800 	.word	0x40010800
 8000404:	40010c00 	.word	0x40010c00

08000408 <myWait>:

void myWait(){
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 50000; i++);
 800040e:	2300      	movs	r3, #0
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	e002      	b.n	800041a <myWait+0x12>
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	3301      	adds	r3, #1
 8000418:	607b      	str	r3, [r7, #4]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000420:	4293      	cmp	r3, r2
 8000422:	ddf7      	ble.n	8000414 <myWait+0xc>
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr
	...

08000430 <main>:

int main(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	clockInit();
 8000434:	f7ff ff9c 	bl	8000370 <clockInit>
	GPIO_Init();
 8000438:	f7ff ffae 	bl	8000398 <GPIO_Init>
	while(1){
		if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0){
 800043c:	2102      	movs	r1, #2
 800043e:	4811      	ldr	r0, [pc, #68]	; (8000484 <main+0x54>)
 8000440:	f7ff ff70 	bl	8000324 <MCAL_GPIO_ReadPin>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d10b      	bne.n	8000462 <main+0x32>
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800044a:	2102      	movs	r1, #2
 800044c:	480e      	ldr	r0, [pc, #56]	; (8000488 <main+0x58>)
 800044e:	f7ff ff7d 	bl	800034c <MCAL_GPIO_TogglePin>
			while (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0); /* Single Press */
 8000452:	bf00      	nop
 8000454:	2102      	movs	r1, #2
 8000456:	480b      	ldr	r0, [pc, #44]	; (8000484 <main+0x54>)
 8000458:	f7ff ff64 	bl	8000324 <MCAL_GPIO_ReadPin>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d0f8      	beq.n	8000454 <main+0x24>
		}
		if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == 1){
 8000462:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000466:	4807      	ldr	r0, [pc, #28]	; (8000484 <main+0x54>)
 8000468:	f7ff ff5c 	bl	8000324 <MCAL_GPIO_ReadPin>
 800046c:	4603      	mov	r3, r0
 800046e:	2b01      	cmp	r3, #1
 8000470:	d104      	bne.n	800047c <main+0x4c>
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13); /* Multiple Press */
 8000472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000476:	4804      	ldr	r0, [pc, #16]	; (8000488 <main+0x58>)
 8000478:	f7ff ff68 	bl	800034c <MCAL_GPIO_TogglePin>
		}
		myWait();
 800047c:	f7ff ffc4 	bl	8000408 <myWait>
		if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0){
 8000480:	e7dc      	b.n	800043c <main+0xc>
 8000482:	bf00      	nop
 8000484:	40010800 	.word	0x40010800
 8000488:	40010c00 	.word	0x40010c00

0800048c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800048c:	480d      	ldr	r0, [pc, #52]	; (80004c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800048e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000490:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000494:	480c      	ldr	r0, [pc, #48]	; (80004c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000496:	490d      	ldr	r1, [pc, #52]	; (80004cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000498:	4a0d      	ldr	r2, [pc, #52]	; (80004d0 <LoopForever+0xe>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800049c:	e002      	b.n	80004a4 <LoopCopyDataInit>

0800049e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a2:	3304      	adds	r3, #4

080004a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a8:	d3f9      	bcc.n	800049e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004aa:	4a0a      	ldr	r2, [pc, #40]	; (80004d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004ac:	4c0a      	ldr	r4, [pc, #40]	; (80004d8 <LoopForever+0x16>)
  movs r3, #0
 80004ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b0:	e001      	b.n	80004b6 <LoopFillZerobss>

080004b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b4:	3204      	adds	r2, #4

080004b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b8:	d3fb      	bcc.n	80004b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ba:	f000 f811 	bl	80004e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004be:	f7ff ffb7 	bl	8000430 <main>

080004c2 <LoopForever>:

LoopForever:
    b LoopForever
 80004c2:	e7fe      	b.n	80004c2 <LoopForever>
  ldr   r0, =_estack
 80004c4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80004c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004d0:	08000548 	.word	0x08000548
  ldr r2, =_sbss
 80004d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004d8:	2000001c 	.word	0x2000001c

080004dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004dc:	e7fe      	b.n	80004dc <ADC1_2_IRQHandler>
	...

080004e0 <__libc_init_array>:
 80004e0:	b570      	push	{r4, r5, r6, lr}
 80004e2:	2500      	movs	r5, #0
 80004e4:	4e0c      	ldr	r6, [pc, #48]	; (8000518 <__libc_init_array+0x38>)
 80004e6:	4c0d      	ldr	r4, [pc, #52]	; (800051c <__libc_init_array+0x3c>)
 80004e8:	1ba4      	subs	r4, r4, r6
 80004ea:	10a4      	asrs	r4, r4, #2
 80004ec:	42a5      	cmp	r5, r4
 80004ee:	d109      	bne.n	8000504 <__libc_init_array+0x24>
 80004f0:	f000 f81a 	bl	8000528 <_init>
 80004f4:	2500      	movs	r5, #0
 80004f6:	4e0a      	ldr	r6, [pc, #40]	; (8000520 <__libc_init_array+0x40>)
 80004f8:	4c0a      	ldr	r4, [pc, #40]	; (8000524 <__libc_init_array+0x44>)
 80004fa:	1ba4      	subs	r4, r4, r6
 80004fc:	10a4      	asrs	r4, r4, #2
 80004fe:	42a5      	cmp	r5, r4
 8000500:	d105      	bne.n	800050e <__libc_init_array+0x2e>
 8000502:	bd70      	pop	{r4, r5, r6, pc}
 8000504:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000508:	4798      	blx	r3
 800050a:	3501      	adds	r5, #1
 800050c:	e7ee      	b.n	80004ec <__libc_init_array+0xc>
 800050e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000512:	4798      	blx	r3
 8000514:	3501      	adds	r5, #1
 8000516:	e7f2      	b.n	80004fe <__libc_init_array+0x1e>
 8000518:	08000540 	.word	0x08000540
 800051c:	08000540 	.word	0x08000540
 8000520:	08000540 	.word	0x08000540
 8000524:	08000544 	.word	0x08000544

08000528 <_init>:
 8000528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052a:	bf00      	nop
 800052c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800052e:	bc08      	pop	{r3}
 8000530:	469e      	mov	lr, r3
 8000532:	4770      	bx	lr

08000534 <_fini>:
 8000534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000536:	bf00      	nop
 8000538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800053a:	bc08      	pop	{r3}
 800053c:	469e      	mov	lr, r3
 800053e:	4770      	bx	lr
